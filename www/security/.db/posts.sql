-- MySQL dump 10.13  Distrib 5.5.41, for debian-linux-gnu (i686)
--
-- Host: localhost    Database: security
-- ------------------------------------------------------
-- Server version	5.5.41-0ubuntu0.12.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `evil_posts`
--

DROP TABLE IF EXISTS `evil_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `evil_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=438 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `evil_posts`
--
-- WHERE:  post_type<>"revision"

LOCK TABLES `evil_posts` WRITE;
/*!40000 ALTER TABLE `evil_posts` DISABLE KEYS */;
INSERT INTO `evil_posts` VALUES (432,1,'2015-03-18 09:55:58','2015-03-18 09:55:58','','Clickjacking-1','','inherit','closed','closed','','clickjacking-1','','','2015-03-18 09:55:58','2015-03-18 09:55:58','',0,'http://vip-training-days.dev/security/wp-content/uploads/2015/03/Clickjacking-1.png',0,'attachment','image/png',0),(433,1,'2015-03-18 09:55:59','2015-03-18 09:55:59','','Clickjacking-2','','inherit','closed','closed','','clickjacking-2','','','2015-03-18 09:55:59','2015-03-18 09:55:59','',0,'http://vip-training-days.dev/security/wp-content/uploads/2015/03/Clickjacking-2.png',0,'attachment','image/png',0),(328,1,'2014-06-18 00:22:08','2014-06-18 00:22:08','','What is Security?','','publish','closed','closed','','what-is-security','','','2014-06-18 00:23:11','2014-06-18 00:23:11','',0,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=328',0,'html5presentation','',0),(333,1,'2014-06-18 00:25:07','2014-06-18 00:25:07','Not physical, not social engineering','Information Security','','publish','closed','closed','','information-security','','','2014-06-18 00:26:48','2014-06-18 00:26:48','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=333',0,'html5presentation','',0),(334,1,'2014-06-18 00:27:41','2014-06-18 00:27:41','<ul>\r\n	<li><span style=\"color: #252525;\">Confidentiality</span></li>\r\n</ul>\r\n<ul>\r\n	<li><span style=\"color: #252525;\">Integrity</span></li>\r\n</ul>\r\n<ul>\r\n	<li>Availability</li>\r\n</ul>','Key Aspects of Security','','publish','closed','closed','','key-aspects-of-security','','','2014-06-18 00:29:03','2014-06-18 00:29:03','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=334',0,'html5presentation','',0),(335,1,'2014-06-18 00:29:34','2014-06-18 00:29:34','','Prevention Principles','','publish','closed','closed','','335-2','','','2014-06-18 00:30:52','2014-06-18 00:30:52','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=335',0,'html5presentation','',0),(336,1,'2014-06-18 00:31:50','2014-06-18 00:31:50','','Thinking Like an Attacker','','publish','closed','closed','','thinking-like-an-attacker','','','2014-06-18 00:31:50','2014-06-18 00:31:50','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=336',0,'html5presentation','',0),(337,1,'2014-06-18 00:32:09','2014-06-18 00:32:09','','Security is a Process, not a Feature','','publish','closed','closed','','security-is-a-process-not-a-feature','','','2014-06-18 00:32:09','2014-06-18 00:32:09','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=337',0,'html5presentation','',0),(338,1,'2014-06-18 00:32:41','2014-06-18 00:32:41','','No Security Through Obscurity','','publish','closed','closed','','no-security-through-obscurity','','','2014-06-18 00:32:41','2014-06-18 00:32:41','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=338',0,'html5presentation','',0),(339,1,'2014-06-18 00:33:38','2014-06-18 00:33:38','','A Chain Is Only as Strong as Its Weakest Link','','publish','closed','closed','','a-chain-is-only-as-strong-as-its-weakest-link','','','2014-06-18 00:33:38','2014-06-18 00:33:38','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=339',0,'html5presentation','',0),(340,1,'2014-06-18 17:16:56','2014-06-18 17:16:56','','Types of Vulnerabilities','','publish','closed','closed','','types-of-vulnerabilities','','','2014-06-18 17:17:16','2014-06-18 17:17:16','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=340',0,'html5presentation','',0),(341,1,'2014-06-18 17:19:14','2014-06-18 17:19:14','SQL, JS, HTML, Shell, Code, HTTP','Injections','','publish','closed','closed','','injections','','','2014-06-18 17:19:14','2014-06-18 17:19:14','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=341',0,'html5presentation','',0),(342,1,'2014-06-18 17:23:52','2014-06-18 17:23:52','CSRF, Clickjacking','Intent Deiversions','','publish','closed','closed','','intent-deiversions','','','2014-06-18 17:23:57','2014-06-18 17:23:57','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=342',0,'html5presentation','',0),(343,1,'2014-06-18 17:24:55','2014-06-18 17:24:55','Lack of permission checks, “secret” resources, logical errors','Access Control','','publish','closed','closed','','access-control','','','2014-06-18 17:27:16','2014-06-18 17:27:16','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=343',0,'html5presentation','',0),(344,1,'2014-06-18 18:06:54','2014-06-18 18:06:54','poor algorithm choice or usage, brute-force','Cryptography','','publish','closed','closed','','cryptography','','','2014-06-18 18:06:54','2014-06-18 18:06:54','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=344',0,'html5presentation','',0),(345,1,'2014-06-18 18:08:05','2014-06-18 18:08:05','buffer overflows, time-based','Lower-level Technical','','publish','closed','closed','','lower-level-technical','','','2014-06-18 18:24:30','2014-06-18 18:24:30','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=345',0,'html5presentation','',0),(348,1,'2014-06-18 18:28:30','2014-06-18 18:28:30','It’s time to get our hands dirty…','Practice','','publish','closed','closed','','practice','','','2014-06-18 18:28:30','2014-06-18 18:28:30','',328,'http://vip-training-days.dev/security/?post_type=html5presentation&#038;p=348',0,'html5presentation','',0),(329,1,'2014-06-18 00:22:49','2014-06-18 00:22:49','','Intro','','publish','closed','closed','','intro','','','2014-06-18 00:22:49','2014-06-18 00:22:49','',0,'http://vip-training-days.dev/security/?page_id=329',0,'page','',0),(346,1,'2014-06-18 18:27:17','2014-06-18 18:27:17','Welcome!\r\n\r\nThis workshop consists of two parts:\r\n<ul>\r\n	<li><a href=\"/security/intro/\">A short high-level presentation</a></li>\r\n	<li>[url post=\"hello-world\"]Hands-on exploiting and fixing vulnerabilities[/url]</li>\r\n</ul>','Home','','publish','closed','closed','','home','','','2015-03-17 23:24:36','2015-03-17 23:24:36','',0,'http://vip-training-days.dev/security/?page_id=346',0,'page','',0),(437,1,'2015-04-24 00:13:32','0000-00-00 00:00:00','','Auto Draft','','auto-draft','closed','closed','','','','','2015-04-24 00:13:32','0000-00-00 00:00:00','',0,'http://vip-training-days.dev/security/?p=437',0,'post','',0),(104,1,'2014-03-19 22:28:48','2014-03-19 22:28:48','<h2>Introduction</h2>\r\n\r\nThe web is built on URLs, and HTTP 3xx status codes allow a server to redirect you to a different URL if it decides you need to complete your request somewhere else.\r\n\r\nWordPress core contains about ~200 redirects.  WordPress.com contains around 10x that.  Clearly they\'re useful :)\r\n\r\nAn <em>open</em> redirect is one which redirects to arbitrary URLs based on user input.\r\n\r\nOpen Redirects are security vulnerabilities primarily because they can be used by phishers to trick people.  Consider the following open redirect at the trusted <code>trusted.com</code>.\r\n\r\n<pre><code class=\"html\">\r\n<a href=\"https://trusted.com/redirect/some/\r\nlong/string/that/maybe/looks/pretty/safe/\r\nbut/you/cant/see/all/of/it/in/your/browser/\r\nchrome/or/email/client/../../../../../../../\r\n../../../../../../../../../../../../../../../\r\n?url=http://evil.com/trusted.com/\">\r\nI am a totally safe and legit link. Click me.\r\n</a>\r\n</code></pre>\r\n\r\n<code>http://evil.com/trusted.com/</code> might host a page that looks exactly like <code>http://trusted.com/</code> perhaps to try and trick you into entering your password.\r\n\r\nOpen redirects can sometimes be used for more interesting exploits too, depending on exactly how badly they\'re implemented.  Certain open redirects can be used to steal oAuth credentials, for example.\r\n\r\nLet’s move on to page 2 to start hacking.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nRemember, in this workshop, we first create a working exploit for the vulnerability, and only after will we fix the problem.\r\n\r\nTo get us started for this first vulnerability, let\'s first look at the plugin\'s code to see where the redirects are.\r\n\r\n<pre class=\"no-wrap\"><code class=\"php mark-16\">\r\n// Near line 41\r\nadd_action( \'admin_post_nopriv_vip_background_color_pick\', array( $this, \'handle_submit\' ) );\r\n\r\n// Near line 108\r\nfunction handle_submit() {\r\n	$request = wp_unslash( $_REQUEST );\r\n\r\n	if ( isset( $request[\'clear\'] ) ) {\r\n		$this->delete_recent_colors();\r\n		setcookie( \'color\', \' \', strtotime( \'-1 year\' ), COOKIEPATH );\r\n	} else if ( isset( $request[\'value\'] ) ) {\r\n		setcookie( \'color\', $request[\'value\'], strtotime( \'+1 year\' ), COOKIEPATH );\r\n		$this->add_recent_color( $request[\'value\'], isset( $request[\'reason\'] ) ? $request[\'reason\'] : \'\' );\r\n	}\r\n\r\n	wp_redirect( $request[\'referer\'] );\r\n	exit;\r\n}\r\n</code></pre>\r\n\r\nSo it looks like there\'s an open redirect using WordPress\' <code>wp-admin/admin-post.php</code> endpoint.\r\n\r\nWe\'ve already created a webpage with a working exploit at [url attack=0-open-redirect.html]<code>/attacks/0-open-redirect.html</code>[/url] (click at your own risk!) (mwahaha!).  It contains a link that is hosted at this site but which, when clicked, redirects the visitor to any other site (in this case, <code>example.com</code>).\r\n\r\n[attack attack=0-open-redirect.html]\r\n\r\nSince the attack already works, all you have to do is push the red “Verify Exploit” button, which will tell the workshop\'s exploit verifying robot to verify the exploit.\r\n\r\nFor this exercise, the robot will:\r\n\r\n<ol>\r\n	<li>Load the [url attack=0-open-redirect.html]<code>/attacks/0-open-redirect.html</code>[/url] in a \"browser\" (behind the scenes, you won\'t see this),</li>\r\n	<li>Find the first link on the page,</li>\r\n	<li>Make sure the link points to a URL hosted here at this site,</li>\r\n	<li>Click the link, and</li>\r\n	<li>Check what domain it ends up at.</li>\r\n</ol>\r\n\r\nAfter the robot has verified the exploit, let\'s move on to [url post=\"0-open-redirect\" page=3]defending against this attack[/url].\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\nBefore sending a redirect, the server needs to validate the URL it would be sending you to.\r\n\r\nThere are two typical ways of doing this.\r\n\r\nThe first would be to generate a <a href=\"https://codex.wordpress.org/WordPress_Nonces\">WordPress Nonce</a> for the URL when it is displayed (when the <code>&lt;a&gt;</code> element is generated, for example) and verify that nonce before sending the redirect.\r\n\r\nThis works well, but you have to make sure the nonce is unique for that specific URL and visitor. We\'ll see later that that can sometimes be tricky.\r\n\r\nThe second means of validation is to only allow redirects to certain whitelisted domains.\r\n\r\nWordPress provides the <code>wp_safe_redirect()</code> function, which uses a filterable whitelist (normally containing only the current site\'s domain).\r\n\r\nWhen you\'ve fixed the open redirect in the Color Picker plugin, click the green \"Verify Fix\" to ask the workshop\'s solution verifying robot to make sure your code changes successfully closed the open redirect vulnerability.','0: Open Redirect','','private','closed','closed','','0-open-redirect','','','2015-04-24 00:16:50','2015-04-24 00:16:50','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=104',0,'post','',0),(8,1,'2014-03-19 23:20:32','2014-03-19 23:20:32','<h2>Introduction</h2>\r\n\r\nCross Site Request Forgery is a class of exploits that trick a site into performing an action on behalf of the victim.\r\n\r\nThe crux is that being able to verify the <em>identify</em> of the person making the request (via a cookie, for example) does not mean a site can verify the <em>intent</em> of the person making a request.\r\n\r\nFor example, a malicious website hosted at <code>evil.com</code> might include the following markup that exploits a weakness in a separate site hosted at <code>victim.org</code>.\r\n\r\n<pre><code class=\"html\">\r\n<img src=\"http://victim.org/admin/?action=delete-my-account\" />\r\n</code></pre>\r\n\r\nThe victim\'s browser will happily send the victim\'s cookie with that \"image\" request to <code>victim.org</code>.\r\n\r\nIf <code>victim.org</code> has no way of verifying the user actually intended to make that request, it will be tricked into deleting the <code>victim.org</code> account of whoever visits <code>evil.com</code>.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nFor this CSRF exploit, we\'ve outlined an almost working attack at [url attack=1-csrf.html]<code>/attacks/1-csrf.html</code>[/url]:\r\n\r\n[attack attack=1-csrf.html]\r\n\r\nThe attack (almost) exploits a vulnerability in the HTTP endpoint meant to handle form submissions of the color picker.\r\n\r\nYour goal is edit that attack file so that it sets the victim\'s background color to <code>#deface</code>.\r\n\r\nWhen you\'ve got [url attack=1-csrf.html]<code>/attacks/1-csrf.html</code>[/url] fully working, click the red \"Verify Exploit\" button, which will tell the exploit verifying robot to verify your exploit.\r\n\r\nFor this exercise, the robot will:\r\n\r\n<ol>\r\n	<li>Serve the attack from <code>example.com</code>,</li>\r\n	<li>Have a hapless victim view <code>example.com</code>,</li>\r\n	<li>Have that same victim view this homepage, and</li>\r\n	<li>Check to see that the victim\'s view of the homepage has a defaced background color.</li>\r\n</ol>\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\nIn WordPress, the best way to fix CSRF vulnerabilities is to use <a href=\"https://codex.wordpress.org/WordPress_Nonces\">WordPress Nonces</a>. These nonces are just random-looking strings that can\'t be guessed by other sites. So if a user submits an action with one of these nonces, WordPress knows the request came from its site, not some other malicious site.\r\n\r\nTo add a nonce to a URL, use:\r\n\r\n<pre><code class=\"php\">\r\n$url = wp_nonce_url( $url, $name_of_action );\r\n// $name_of_action is like\r\n// \"create_post\", \"pick_color\", ...\r\n</code></pre>\r\n\r\nTo add a nonce to a form, use:\r\n\r\n<pre><code class=\"php\">\r\n// This echoes a hidden form field\r\nwp_nonce_field( $name_of_action );\r\n</code></pre>\r\n\r\nAdding a nonce isn\'t good enough: you also need to verify the nonce in the code that performs the action:\r\n\r\n<pre><code class=\"php\">\r\n// Verify the nonce.\r\n// This is the right function even though it\'s badly named.\r\ncheck_admin_referer( $name_of_action );\r\n\r\n// Perform the action\r\n...\r\n</code></pre>\r\n\r\n<code>check_admin_referer()</code> should be used to verify nonces for normal requests, and <code>check_ajax_referer()</code> can be used to verify nonces for AJAX requests.  WordPress also has a lower-level function <code>wp_verify_nonce()</code>, but it\'s easy to use incorrectly, so we suggest you avoid it.\r\n\r\nOnce you\'ve fixed the CSRF vulnerability in the Color Picker Plugin, push the green \"Verify Fix\" button to have the robot check your code.','1: CSRF','','private','closed','closed','','1-csrf','','','2015-04-24 00:16:01','2015-04-24 00:16:01','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=8',0,'post','',0),(29,1,'2014-03-21 03:55:08','2014-03-21 03:55:08','<h2>Introduction</h2>\r\nWe just looked at an attack of <em>intent</em> with that CSRF vulnerability. Now let\'s shift gears and look at an <em>injection</em> vulnerability.\r\n\r\nInjection vulnerabilities are caused by improperly escaping output, which allows malicious users to inject content into some output stream.\r\n\r\nXSS (Cross Site Scripting) vulnerabilities are a type of injection attack and allow malicious users to inject content int a web page\'s markup: its HTML, CSS, JavaScript, ....\r\n\r\nTypically, XXS vulnerabilities are exploited by injecting JavaScript that then either performs actions as the logged in user (like creating a new post) or steals the logged in user\'s credentials (perhaps by forwarding <code>document.cookie</code> to a remote server).\r\n<h3>Example</h3>\r\n<pre><code class=\"html\">\r\n<a href=\"http://example.com/hello/?ref=<?php\r\n  echo $_GET[\'ref\'];\r\n?>\">Hello</a>\r\n</code></pre>\r\nWe\'d exploit that vulnerability by getting our victim to go to a URL like:\r\n<pre><code class=\"no-highlight\">\r\nhttp://example.com/?ref=foo%22+onclick%3D%22javascript%3Aalert%28%2FXSS%2F%29\r\n</code></pre>\r\nwhich would result in markup like:\r\n<pre><code class=\"html\">\r\n<a href=\"http://example.com/hello/?ref=foo\" onclick=\"javascript:alert(/XSS/)\">Hello</a>\r\n</code></pre>\r\n<h3>Note</h3>\r\nIf a site has an XSS vulnerability, any CSRF protection it has is useless since the XSS allows us to act as the user.\r\n\r\n<!--nextpage-->\r\n<h2>Attack!</h2>\r\nYour goal is to exploit a so-called \"persistent\" or \"stored\" XSS: an XSS vulnerability whose exploit sticks around for other visitors on new page loads.\r\n\r\nThe Color Picker lists colors recently chosen by other visitors. Maybe there\'s something you can exploit there?\r\n\r\nTo prove you\'ve been able to hack the site, make the site show a JavaScript <code>alert()</code> when it loads.\r\n\r\n<!--nextpage-->\r\n<h2>Defend!</h2>\r\nXSS bugs are caused by incorrectly escaping output.\r\n<h3>Example</h3>\r\n<pre><code class=\"html\">\r\n<a href=\"http://example.com/hello/?ref=<?php\r\n  echo $_GET[\'ref\'];\r\n?>\">Hello</a>\r\n</code></pre>\r\nThe above is vulnerable because <code>$_GET[\'ref\']</code> is not escaped properly for its output context (a query argument in a URL in an HTML attribute).\r\n\r\nThe vulnerability can be closed with proper escaping:\r\n<pre><code class=\"html\">\r\n<a href=\"<?php\r\n  echo esc_url(\r\n    \"http://example.com/hello/?ref=\" .\r\n    urlencode( $_GET[\'ref\'] )\r\n  );\r\n?>\">Hello</a>\r\n</code></pre>\r\n\r\nIn addition to <code>esc_url()</code>, WordPress provides a number of <a href=\"https://codex.wordpress.org/Data_Validation\">escaping functions</a> for use in different output contexts (HTML, JS, URLs, etc.).\r\n\r\n<code>esc_html()</code> is for output in HTML text nodes:\r\n<pre><code class=\"html\">\r\n<h1><?php\r\n  echo esc_html( $_GET[\'heading\'] );\r\n?></h1>\r\n</code></pre>\r\n<code>esc_attr()</code> is for (non-URL) output in HTML attributes:\r\n\r\n<pre><code class=\"html\">\r\n<span class=\"<?php\r\n  echo esc_attr( $_GET[\'type\'] );\r\n?>\">foo</span>\r\n</code></pre>\r\n\r\nOnce you\'ve fixed the XSS bug, click the green \"Verify Fix\" button to make sure everything works.','2: XSS','','private','closed','closed','','2-xss','','','2015-04-24 00:16:01','2015-04-24 00:16:01','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=29',0,'post','',0),(68,1,'2014-03-21 18:03:17','2014-03-21 18:03:17','<h2>Introduction</h2>\r\n\r\nXSS vulnerabilities don\'t just occur in PHP or HTML.  Anything that changes the contents of a page is potentially vulnerable.\r\n\r\nIn particular, JavaScript DOM manipulations are common sources of XSS vulnerabilities.\r\n\r\n<h3>Example</h3>\r\n\r\nSome code to validate a form might do something like the following.\r\n\r\n<pre><code class=\"js\">\r\n$( \'#error\' ).append(\r\n  \"<p>Invalid input: \'\"\r\n  + $( \'#input\' ).val()\r\n  + \"\'</p>\"\r\n);\r\n</code></pre>\r\n\r\nA malicious user might exploit that code by adding <code>&lt;script&gt;</code> tags into the input element\'s value.\r\n\r\nThese XSS via JS vulnerabilities sometimes only affect the current user: so the user can attack his or her own account, but not others\'.  That situation can still be vulnerable in locked down environments (kiosks, apps, ...), or if there is a CSRF vulnerability or some other way to trick the user into XSSing him- or herself.\r\n\r\nOften, though, these XSS via JS vulnerabilities are just as bad as server-side XSS vulnerabilities.  Any site that displays live updates from other users (via AJAX, for example), also has DOM manipulation being performed in JS on data generated by other, potentially malicious, users.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nThe goal again is to cause an <code>alert()</code>.  This time, though, you want to make that <code>alert()</code> happen to another user visiting the site at the same time you are..\r\n\r\n[attack attack=3-xss-js.js]\r\n\r\nClicking the red \"Verify Exploit\" button will ask the robot to verify the exploit.  The robot will:\r\n\r\n<ol>\r\n	<li>Load this site\'s homepage (behind the scenes: you won\'t see it happening) on behalf of a hapless victim,</li>\r\n	<li>Load the homepage again in a separate \"browser\" (behind the scenes) as you, the malicious hacker,</li>\r\n	<li>Add the attack you create at [url attack=3-xss-js.js]<code>/attacks/3-xss-js.js</code>[/url] to that second \"browser\'s\" context (to simulate you performing malicious actions on the site), and</li>\r\n	<li>Check that an alert happens in the first \"browser\" being viewed by the victim.</li>\r\n</ol>\r\n\r\nYou don\'t need to use the [url attack=3-xss-js.js]<code>/attacks/3-xss-js.js</code>[/url] file to perform your malicious actions.  You could use some other tool while the visitor is still looking at the homepage.  If you use some other tool, note that the visitor closes the \"window\" after 5 seconds, so that\'s how long you have.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\nThe prevention of XSS in JS is similar to the prevention of XSS in PHP: don\'t blindly concatenate strings; use some helpers to build the final output.\r\n\r\nWe can, for example, make use of jQuery\'s <code>.text()</code> and <code>.attr()</code> to set an elements text contents or attribute value.  (We could also do this natively with the DOM\'s <code>.textContent</code>/<code>.innerText</code> and <code>. setAttribute()</code>).\r\n\r\n<h3>Example</h3>\r\n\r\nBad:\r\n\r\n<pre><code class=\"js\">\r\n$( \'#error\' ).append(\r\n  \"<p>Invalid input: \'\"\r\n  + $( \'#input\' ).val()\r\n  + \"\'</p>\"\r\n);\r\n</code></pre>\r\n\r\nGood:\r\n\r\n<pre><code class=\"js\">\r\n$( \'#error\' ).append(\r\n  $( \'<p>\' ).text(\r\n    \"Invalid input: \'\"\r\n    + $( \'#input\' ).val()\r\n    + \"\'\"\r\n  )\r\n);\r\n</code></pre>\r\n\r\nNote that while using jQuery\'s <code>.text()</code> on user input is safe, using its <code>.html()</code> is not.\r\n\r\nConsider the following functions:\r\n\r\n<pre><code class=\"js\">\r\n// SAFE\r\nfunction html_esc_text( string ) {\r\n  return $( \'<span />\' ).text( string ).html();\r\n}\r\n\r\n// UNSAFE\r\nfunction strip_tags( string ) {\r\n  return $( \'<span />\' ).html( string ).text();\r\n}\r\n</code></pre>\r\n\r\nThe second one is unsafe even though the HTML generated from <code>string</code> is never added to the DOM. jQuery will still execute any <code>&lt;script&gt;</code> tags in <code>string</code> and may also attempt to load any referenced <code>&lt;img&gt;</code>s and other media.\r\n\r\nWhen you\'ve fixed the JS XSS vulnerability, click the green \"Verify Fix\" button to check your fix.','3: XSS in JavaScript','','private','closed','closed','','3-xss-js','','','2015-04-24 00:16:01','2015-04-24 00:16:01','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=68',0,'post','',0),(79,1,'2014-03-21 22:43:23','2014-03-21 22:43:23','<h2>Introduction</h2>\r\n\r\nInjection vulnerabilities can turn up anywhere, which makes sense: all data is input from somewhere and output to somewhere else.  If the input isn\'t validated/sanitized/escaped correctly for where it needs to be output, bad things (like security vulnerabilities!) can happen.\r\n\r\n<h3>General Tips</h3>\r\n\r\nThese are some rules of thumb that will make it harder for injection vulnerabilities to creep into your code.\r\n\r\n<ul>\r\n	<li>Validate input immediately.</li>\r\n	<li>Keep data \"raw\".</li>\r\n	<li>Sanitize (escape) data as late as possible.</li>\r\n	<li>Easier to read is better than clever to write.</li>\r\n</ul>\r\n\r\nFor example, here\'s some code that breaks all those rules.\r\n\r\n<pre><code class=\"php\">\r\n// Bad: Escape early\r\n// Bad: What is going on!?\r\nextract( array_map( \'esc_html\', $_GET ) );\r\n\r\n... // Bad: Data is not raw\r\n\r\n// Bad: Validate late\r\n// Accept only ASCII data\r\nif ( preg_match( \'/^[\\x20-\\x7e]+$/\', $slug ) ) {\r\n  echo $slug; // is this safe? Depends on \"...\"\r\n}\r\n</code></pre>\r\n\r\nAnd here\'s the same code rewritten to adhere to all those rules.\r\n\r\n<pre><code class=\"php\">\r\n// Good: This is clear\r\n$slug = $_GET[\'slug\']\r\n\r\n// Good: Validate early\r\n// Accept only ASCII data\r\nif ( ! preg_match( \'/^[\\x20-\\x7e]+$/\', $slug ) ) {\r\n  return;\r\n}\r\n\r\n... // Good: Data is raw throughout\r\n\r\n// Good: Escape late\r\necho esc_html( $name ); // is this safe? Yes.\r\n</code></pre>\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nThere\'s (at least) one more XSS vulnerability left in our Color Picker plugin.\r\n\r\nGoal: In addition to changing the background color, also change the text color of the page to <code>#deface</code>. You can do worse than just changing the color, but use that as a proof of concept.\r\n\r\nAs before, you can edit [url attack=4-xss-css.js]<code>/attacks/4-xss-css.js</code>[/url] or use whatever other tool you want.\r\n\r\n[attack attack=4-xss-css.js]\r\n\r\nThe red \"Verify Exploit\" button will do the following to test your attack.\r\n\r\n<ol>\r\n	<li>Load the homepage of this site in one \"browser\" (behind the scenes: you won\'t see this) as you, the malicious hacker,</li>\r\n	<li>Add [url attack=4-xss-css.js]<code>/attacks/4-xss-css.js</code>[/url] to the window\'s context (to simulate you performing malicious actions on the site),</li>\r\n	<li>Wait a few seconds,</li>\r\n	<li>Load the homepage again in a separate \"browser\" as a hapless victim (again behind the scenes), and</li>\r\n	<li>Have the victim click the first color in the Recent Colors list,</li>\r\n	<li>Have the victim submit the form, and</li>\r\n	<li>Check to see if the text color is <code>#deface</code>.</li>\r\n</ol>\r\n\r\nAgain, for this exercise, there\'s no need to actually use [url attack=4-xss-css.js]<code>/attacks/4-xss-css.js</code>[/url].\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend</h2>\r\n\r\nWordPress doesn\'t include any functions useful in sanitizing or escaping data for output as CSS, so you\'ll have to come up with something on your own.\r\n\r\nWhen you\'ve fixed the plugin, click the green \"Verify Fix\" button to move on.','4: XSS Everywhere :)','','private','closed','closed','','4-xss-css','','','2015-03-18 09:45:46','2015-03-18 09:45:46','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=79',0,'post','',0),(61,1,'2014-03-21 22:57:38','2014-03-21 22:57:38','<h2>A Pretty Lie</h2>\r\n\r\nWordPress\' native CSRF protection functions are designed to work only for logged in users.\r\n\r\nOur Color Picker plugin is designed to work for all users - logged in or out.\r\n\r\nSo, what we did earlier to protect ourselves from CSRF attacks was useless :)\r\n\r\nTo see why, view the source of the page in two windows: one incognito. You\'ll see both nonces are the same.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nThe basic idea is that <code>evil.com</code> can host a page that first scrapes the nonce from <code>victim.org</code> then uses that nonce in the output it shows to its unsuspecting visitors.\r\n\r\nFix the attack at [url attack=\"5-csrf-again.php\"]<code>/attacks/5-csrf.php</code>[/url] to exploit the CSRF vulnerability.\r\n\r\n[attack attack=\"5-csrf-again.php\"]\r\n\r\nTest your exploit with the red \"Verify Exploit\" button, which will perform the same steps as in the previous CSRF exercise to verify your attack:\r\n\r\n<ol>\r\n	<li>Serve the attack from example.com,</li>\r\n	<li>Have a hapless victim view example.com,</li>\r\n	<li>Have that same victim view this homepage, and</li>\r\n	<li>Check to see that the victim\'s view of the homepage has a defaced background color.</li>\r\n</ol>\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\nYou\'ll need to come up with a way to modify the nonce to include some information unique to each visitor that a third party couldn\'t guess or scrape.\r\n\r\nOnce you\'ve modified the plugin, click the green \"Verify Fix\" button to test your code.','5: CSRF Again','','private','closed','closed','','5-csrf-again','','','2015-03-18 09:45:46','2015-03-18 09:45:46','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=61',0,'post','',0),(102,1,'2014-03-22 01:16:54','2014-03-22 01:16:54','<h2>Introduction</h2>\r\n\r\nClickjacking is a technique malicious sites use to trick you into clicking on one site when you think you\'re clicking on another.\r\n\r\nA common version of this technique is to host a malicious site at <code>evil.com</code> with a tempting link:\r\n\r\n<a href=\"/security/wp-content/uploads/2015/03/Clickjacking-1.png\"><img src=\"/security/wp-content/uploads/2015/03/Clickjacking-1.png\" alt=\"\" width=\"627\" height=\"337\" class=\"alignnone size-full wp-image-159\" /></a>\r\n\r\nIn reality, though, <code>evil.com</code> has iframed a victim site in a transparent iframe on top of the <code>evil.com</code> site.\r\n\r\n<a href=\"/security/wp-content/uploads/2015/03/Clickjacking-2.png\"><img src=\"/security/wp-content/uploads/2015/03/Clickjacking-2.png\" alt=\"\" width=\"739\" height=\"466\" class=\"alignnone size-full wp-image-160\" /></a>\r\n\r\nA user attempting to click on that tempting link will actually be clicking on a link on the victim site.  CSRF protection on the victim site is not good enough to stop this attack.\r\n\r\nIn addition to transparent iframes, clickjacking can also make use of custom mouse cursors (to make you think you\'re clicking in one area when really you\'re clicking in another) or allowing an iframe of your victim site to \"shine through\" a mask of other elements on <code>evil.com</code>.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nYour goal is to trick someone into changing their background color on this site to <code>#deface</code> using [url attack=7-clickjacking.html]<code>/attacks/7-clickjacking.html</code>[/url].\r\n\r\nWe\'ll assume the victim really likes bunnies and kitties.\r\n\r\n[attack attack=7-clickjacking.html]\r\n\r\nClicking the red \"Verify Exploit\" robot will:\r\n\r\n<ol>\r\n	<li>Load [url attack=7-clickjacking.html]<code>/attacks/7-clickjacking.html</code>[/url],</li>\r\n	<li>Look for a link that says \"BUNNY!\" and click its position,</li>\r\n	<li>Look for a link that says \"KITTY!\" and click its position,</li>\r\n	<li>Load this site\'s homepage, and</li>\r\n	<li>Check that the page\'s background color is <code>#deface</code>.</li>\r\n</ol>\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\nHistorically, clickjacking was thwarted using Javascript techniques called \"<a href=\"http://en.wikipedia.org/wiki/Framekiller\">framebusters</a>\":\r\n\r\n<pre><code class=\"html\">\r\n<script>\r\nif ( top !== self ) {\r\n  top.location.replace( self.location );\r\n}\r\n</script>\r\n</code></pre>\r\n\r\nThese never worked that well.  They can be tricked into breaking with various \"framebuster busters\": tricks that rely on funky browser behavior:\r\n\r\n<pre><code class=\"js\">\r\nwindow.onbeforeunload = function() {\r\n  top.location = some_url_that_returns_http_204;\r\n};\r\n</code></pre>\r\n\r\nor standards technology meant to make browsers <em>safer</em>:\r\n\r\n<pre><code class=\"html\">\r\n<!-- HTML5 -->\r\n<iframe sandbox src=\"...\">\r\n<!-- IE -->\r\n<iframe security=\"restricted\" src=\"...\">\r\n</code></pre>\r\n\r\nThe best way to prevent Clickjacking is to use the <a href=\"https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options\">X-Frame-Options</a> HTTP header:\r\n\r\n<pre><code class=\"http\">\r\nX-Frame-Options: SAMEORIGIN\r\n</code></pre>\r\n\r\nwhich tells the browser to block the frame from displaying if it\'s embedded in a different site.\r\n\r\n(Note that the <code>X-Frame-Options</code> header may some day be deprecated in favor of the future <a href=\"http://www.w3.org/TR/CSP11/#directive-frame-ancestors\"><code>frame-ancestors</code> directive</a> of the <a href=\"http://content-security-policy.com/\"><code>Content-Security-Policy</code> header</a>.)\r\n\r\nFor browsers that don\'t support this header (IE <= 7), the safest thing is to use the JavaScript technique above but to assume the worst first and only load the page\'s content after verifying things are OK:\r\n\r\n<pre><code class=\"html\">\r\n<html style=\"display: none;\">\r\n<script>\r\nif ( top === self ) {\r\n  document.documentElement\r\n    .style.display = \'block\';\r\n} else {\r\n  top.location.replace( self.location );\r\n}\r\n</script>\r\n</code></pre>\r\n\r\nOnce you\'ve fixed the Clickjacking vulnerability, click the green \"Verify Fix\" button to make sure everything works.','7: Clickjacking','','private','closed','closed','','7-clickjacking','','','2015-04-24 00:16:01','2015-04-24 00:16:01','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=102',0,'post','',0),(116,1,'2014-03-22 20:10:48','2014-03-22 20:10:48','<h2>Introduction</h2>\r\n\r\nLike XXS, SQL Injection vulnerabilities are injection attacks.\r\n\r\nInstead of injecting markup into a webpage, though, the goal of the attacker in SQL injection attacks is to inject data into the SQL commands your site sends to your SQL servers.\r\n\r\nWith that injected data, the attacker can often read any data from any database table, and can sometimes alter the data stored in tables as well.\r\n\r\n<h3>Example</h3>\r\n\r\n<pre><code class=\"php\">\r\n$products = mysql_query(\r\n  \"SELECT * FROM `accounts`\r\n   WHERE `account_owner` = {$_GET[\'id\']}\"\r\n);\r\n</code></pre>\r\n\r\nIn this example, an attacker can set <code>$_GET[\'id\']</code> to something like <code>0 OR 1</code> by setting the url\'s query string to <code>?id=0+OR+1</code>\r\n\r\nThat would result in the following SQL statement.\r\n\r\n<pre><code class=\"sql\">\r\nSELECT * FROM `accounts`\r\nWHERE `account_owner` = 0 OR 1\r\n</code></pre>\r\n\r\nWhich asks the SQL server to return all the accounts owned by user=0 and <em>all the accounts</em> since the condition is just <code>1</code> which acts something like the following PHP snippet might:\r\n\r\n<pre><code class=\"php\">\r\n$results = array();\r\nforeach ( $accounts as $account ) {\r\n  if ( 0 == $account->owner ) {\r\n    // WHERE `account_owner` = 0\r\n    $results[] = $account;\r\n  } else if ( true ) { // OR\r\n    // WHERE 1\r\n    $results[] = $account;\r\n  }\r\n}\r\nreturn $results;\r\n</code></pre>\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nYour goal is to determine this site\'s admin user\'s email address using a SQL injection.\r\n\r\n[attack attack=8-sql-injection.js]\r\n\r\nThe red \"Verify Exploit\" robot will:\r\n\r\n<ol>\r\n	<li>Load the homepage of this site in a \"browser\" (behind the scenes: you won\'t see this) as you, the malicious hacker,</li>\r\n	<li>Add [url attack=8-sql-injection.js]<code>/attacks/8-sql-injection.js</code>[/url] to the browser\'s context (to simulate you performing malicious actions on the site),</li>\r\n	<li>Wait until your script submits something,</li>\r\n	<li>Check to see if you\'ve managed to inject the admin user\'s email address on the page.</li>\r\n</ol>\r\n\r\nYou don\'t need to use the [url attack=8-sql-injection.js]<code>/attacks/8-sql-injection.js</code>[/url] file to perform your malicious actions; you can use whatever tools you like.\r\n\r\nBecause of the vagaries of the test robot, though, the [url attack=8-sql-injection.js]<code>/attacks/8-sql-injection.js</code>[/url] file <em>does</em> need to submit something.\r\n\r\nAlso remember that the admin\'s email address needs to show up on the page the test\'s fake browser sees, not just the page you can see in your real browser.\r\n\r\nPS: The robot is not smart enough to read images.  It has to find the email in plaintext in the markup.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\nWordPress provides several functions for ensuring database queries are safe.\r\n\r\n<a href=\"https://codex.wordpress.org/Data_Validation#Database\">https://codex.wordpress.org/Data_Validation#Database</a>\r\n\r\nThe most general solution is <a href=\"https://codex.wordpress.org/Class_Reference/wpdb#Protect_Queries_Against_SQL_Injection_Attacks\"><code>$wpdb->prepare()</code></a>, which works like PHP\'s <a href=\"http://php.net/sprintf\"><code>sprintf()</code></a> to \"prepare\" a statement for use in <code>$wpdb->query()</code>, <code>$wpdb->get_results()</code>, <code>$wpdb->get_row()</code>, etc.\r\n\r\n<pre><code class=\"php\">\r\n// Bad\r\n$wpdb->get_row(\r\n  \"SELECT * FROM `accounts`\r\n   WHERE `account_owner = {$_GET[\'id\']}\"\r\n);\r\n\r\n// Good\r\n$wpdb->get_row( $wpdb->prepare(\r\n  \"SELECT * FROM `accounts`\r\n   WHERE `account_owner = %d\",\r\n  $_GET[\'id\']}\r\n) );\r\n\r\n</code></pre>\r\n\r\n<code>$wpdb->insert()</code> and <code>$wpdb->update()</code> are convenient wrappers around <code>$wpdb->prepare()</code> for common <code>INSERT</code> and <code>UPDATE</code> SQL commands.\r\n\r\nOnce you\'ve fixed the SQL Vulnerability, click the green \"Verify Fix\" button to ask our friendly robot to make sure everything\'s working correctly.','8: SQL Injection','','private','closed','closed','','8-sql-injection','','','2015-04-24 00:16:01','2015-04-24 00:16:01','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=116',0,'post','',0),(111,1,'2014-03-22 23:40:38','2014-03-22 23:40:38','<h2>Introduction</h2>\r\n\r\nIt should be obvious that this is bad:\r\n\r\n<pre><code class=\"php\">\r\neval( $_GET[\'code\'] );\r\n</code></pre>\r\n\r\nThat PHP snippet allows anyone to execute arbitrary PHP code on your server.  With an Arbitrary Code Execution Vulnerability, an attacker can do anything: read your files, install remote shells, ....\r\n\r\nThat <code>eval()</code> shows up in a few sneaky places elsewhere in PHP, however, with similarly scary (but not as obviously so) results.\r\n\r\nOne such place is the use of <a href=\"http://us2.php.net/create_function\"><code>create_function()</code></a>, which is a convenient way to create a small function whose code depends on some other variable.\r\n\r\nA silly example:\r\n\r\n<pre><code class=\"php\">\r\n$add_to = (int) $_GET[\'add\'];\r\n$adder = create_function(\r\n  \'$number\',\r\n  \'return \' . $add_to . \' + (int) $number;\'\r\n);\r\n$adder( 5 ); // adds 5 to $_GET[\'add\']\r\n</code></pre>\r\n\r\nSince the second argument (the string representing the new function\'s body) gets <code>eval()</code>\'d, we need to be very careful when using create function to make sure we don\'t allow arbitrary code execution.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nYour goal is to expose this site\'s <code>AUTH_SALT</code> constant.\r\n\r\nObviously you can just look it up in <code>wp-config.php</code>.  The goal is to get the site to reveal it to you via a code execution vulnerability.\r\n\r\n[attack attack=9-create-function.js]\r\n\r\nThe red \"Verify Exploit\" button will:\r\n\r\n<ol>\r\n	<li>Load the homepage of this site in a \"browser\" (behind the scenes: you won\'t see this) as you, the malicious hacker,</li>\r\n	<li>Add [url attack=9-create-function.js]<code>/attacks/9-create-function.js</code>[/url] to the browser\'s context (to simulate you performing malicious actions on the site),</li>\r\n	<li>Wait until your script submits something,</li>\r\n	<li>Checks to see if you\'ve managed to inject the admin user\'s email address on the page.</li>\r\n</ol>\r\n\r\nAs always for these injection attacks, you don\'t need to use the [url attack=9-create-function.js]<code>/attacks/9-create-function.js</code>[/url] file; you can use whatever tools you like.\r\n\r\nBecause of the vagaries of this \"Verify Exploit\" test, though, the [url attack=10-preg-replace.js]<code>/attacks/9-create-function.js</code>[/url] file <em>does</em> need to submit something.\r\n\r\nAlso remember that the <code>AUTH_SALT</code> needs to show up on the page the test\'s fake browser sees, not just the page you can see in your real browser.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\nIt is possible to use <code>create_function()</code> correctly.  However, in addition to being difficult to keep secure, it is also not very performant.\r\n\r\nInstead, you should always use a regular PHP function, or a <a href=\"http://us1.php.net/manual/en/functions.anonymous.php\">PHP closure</a> if the function\'s contents depends on some local variable.\r\n\r\nAfter you\'ve fixed the plugin, click the green \"Verify Fix\" button to ensure everything is working.','9: Code Execution','','private','closed','closed','','9-create-function','','','2015-03-18 09:45:46','2015-03-18 09:45:46','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=111',0,'post','',0),(109,1,'2014-03-22 23:43:04','2014-03-22 23:43:04','<h2>Introduction</h2>\r\n\r\nCode execution vulnerabilities can also come from using <a href=\"http://php.net/preg_replace\"><code>preg_replace()</code></a>.\r\n\r\nIn <code>preg_replace()</code> the <a href=\"http://us3.php.net/manual/en/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers.eval\"><code>/e</code> modifier</a> (a.k.a. <code>PREG_REPLACE_<strong>EVAL</strong></code>) tells PHP to replace the match, not with the replacement string as normal, but with the replacement string first <code>eval()</code>\'d.\r\n\r\nThe classic example demonstrating this vulnerability is a function that capitalizes all HTML headers.\r\n\r\n<pre><code class=\"php\">\r\n$text = preg_replace(\r\n  \'#<h\\d>(.*?)</h\\d>#e\',\r\n  \'strtoupper( \"\\\\1\" )\',\r\n  $text\r\n);\r\n</code></pre>\r\n\r\nPHP\'s <a href=\"http://us1.php.net/manual/en/language.types.string.php#language.types.string.parsing\">string parsing</a> allows for some pretty nefarious stuff and is the trick to exploiting the code above.\r\n\r\n<pre><code class=\"html\">\r\n<h1>{${eval($_GET[code])}}</h1>\r\n</code></pre>\r\n\r\nSending that text through the <code>preg_replace(/e)</code> above will result in something like:\r\n\r\n<pre><code class=\"php\">\r\n\'<h1>\' . strtoupper( \"{${eval($_GET[code])}}\" ) . \'</h1>\';\r\n</code></pre>\r\n\r\n<code>\"{${eval($_GET[code])}}\"</code> is: the contents of the variable whose name is the result of <code>eval($_GET[code])</code>.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nAgain, your goal is to expose this site\'s <code>AUTH_SALT</code> constant.\r\n\r\n[attack attack=10-preg-replace.js]\r\n\r\nThe red \"Verify Exploit\" button will:\r\n\r\n<ol>\r\n	<li>Load the homepage of this site in a \"browser\" (behind the scenes: you won\'t see this) as you, the malicious hacker,</li>\r\n	<li>Add [url attack=10-preg-replace.js]<code>/attacks/10-preg-replace.js.js</code>[/url] to the browser\'s context (to simulate you performing malicious actions on the site),</li>\r\n	<li>Wait until your script submits something,</li>\r\n	<li>Checks to see if you\'ve managed to inject the admin user\'s email address on the page.</li>\r\n</ol>\r\n\r\nAs always for these injection attacks, you don\'t need to use the [url attack=10-preg-replace.js]<code>/attacks/10-preg-replace.js</code>[/url] file; you can use whatever tools you like.\r\n\r\nBecause of the vagaries of this \"Verify Exploit\" test, though, the [url attack=10-preg-replace.js]<code>/attacks/10-preg-replace.js</code>[/url] file <em>does</em> need to submit something.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\n<code>preg_replace(/e)</code> is terrible.\r\n\r\nAlways use <a href=\"http://php.net/preg_replace_callback\"><code>preg_replace_callback()</code></a> instead.\r\n\r\nAfter you\'ve fixed the plugin, click the green \"Verify Fix\" button to check and make sure everything is working.','10: More Code Execution','','private','closed','closed','','10-preg-replace','','','2015-03-18 09:45:46','2015-03-18 09:45:46','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=109',0,'post','',0),(118,1,'2014-03-24 00:09:47','2014-03-24 00:09:47','<h2>Introduction</h2>\r\n\r\n<a href=\"http://php.net/system\"><code>system()</code></a>, <a href=\"http://php.net/exec\"><code>exec()</code></a>, <a href=\"http://php.net/passthru\"><code>passthru()</code></a>, <a href=\"http://php.net/proc_open\"><code>proc_open()</code></a>, <a href=\"http://php.net/shell_exec\"><code>shell_exec()</code></a>, and <a href=\"http://www.php.net/manual/en/language.operators.execution.php\"><code>``</code></a> (<a href=\"http://www.php.net/manual/en/language.operators.execution.php\">PHP\'s backtick operator</a>) are all used to execute arbitrary commands in the host\'s shell/operating system.\r\n\r\nTheir use should be avoided whenever possible.\r\n\r\nWhen their use is necessary, we have to be very careful about passing data to them, otherwise we can open up any number of vulnerabilities.\r\n\r\nPHP\'s <a href=\"http://php.net/escapeshellarg\"><code>escapeshellarg()</code></a> is not a panacea, but it does help considerably.\r\n\r\nBecause each possible command we could execute is different, <strong>there is no one way to ensure any arbitrary input can be safely passed</strong> through <code>exec()</code> and friends.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nYour goal is to extract and display the full contents of this site\'s <code>wp-config.php</code>.\r\n\r\n[attack attack=11-os-injection.js]\r\n\r\nThe red \"Verify Exploit\" robot will:\r\n\r\n<ol>\r\n	<li>Load the homepage of this site in a \"browser\" (behind the scenes: you won\'t see this) as you, the malicious hacker,</li>\r\n	<li>Add [url attack=11-os-injection.js]<code>/attacks/11-os-injection.js</code>[/url] to the browser\'s context (to simulate you performing malicious actions on the site),</li>\r\n	<li>Wait until your script submits something,</li>\r\n	<li>Check to see if you\'ve managed to inject the contents of <code>wp-config.php</code>.</li>\r\n</ol>\r\n\r\nYou don\'t need to use the [url attack=11-os-injection.js]<code>/attacks/11-os-injection.js</code>[/url] file to perform your malicious actions; you can use whatever tools you like.\r\n\r\nBecause of the vagaries of the test robot, though, the [url attack=11-os-injection.js]<code>/attacks/11-os-injection.js</code>[/url] file <em>does</em> need to submit something.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\nIf <code>escapeshellarg()</code> can\'t save you, you\'ll have to come up with something of your own....\r\n\r\nOnce you\'ve fixed the plugin, click the green \"Verify Fix\" button to make sure your code is working correctly.','11: OS Injection','','private','closed','closed','','11-os-injection','','','2015-03-18 09:45:46','2015-03-18 09:45:46','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=118',0,'post','',0),(120,1,'2014-03-24 00:45:04','2014-03-24 00:45:04','<h2>Introduction</h2>\r\n\r\nXML eXternal Entity exploits are a class of vulnerabilities, the most serious of which can lead to arbitrary filesystem or networked data disclosure.\r\n\r\nML is awesome. It lets you define additional <code>&entities;</code>\r\n\r\nXML is extra awesome. It lets you reference external resources in those definitions.\r\n\r\n<h3>Example</h3>\r\n\r\n<pre><code class=\"php\">\r\n<?php\r\n$xml = simplexml_load_file( $uploaded_file );\r\n?>\r\n<h1><?php printf(\r\n  \"%s Uploaded!\",\r\n  esc_html( $xml->title )\r\n); ?></h1>\r\n</code></pre>\r\n\r\nThe above seems innocuous, but can be exploited with the following attack.\r\n\r\n<pre><code class=\"xml\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE something\r\n  [<!ENTITY awesome SYSTEM\r\n    \"file:///home/www/public_html/.htpasswd\"\r\n  >]\r\n>\r\n<something>\r\n  <title>&awesome;</title>\r\n</something>\r\n</code></pre>\r\n\r\nWhich would result in the following output.\r\n\r\n<pre><code class=\"html\">\r\n<h1>admin:$apr1$AmzwuIzm$mRHUB40VnBSQWmS1XNTtK1\r\nsue:$apr1$2fZN0vCU$UXjPFHfxaAYGj.tdJKzc60\r\nbob:$apr1$IJr0iaQZ$JVpAJWuMsMmOKCpy76CRs0 Uploaded!</h1>\r\n</code></pre>\r\n\r\nAnother type of XXE attack involves recursively defining <code>&entities;</code>.\r\n\r\n<pre><code lang=\"xml\">\r\n<!DOCTYPE lolz [\r\n<!ENTITY lol \"lol\">\r\n<!ENTITY lol2 \"&lol;&lol;\">\r\n<!ENTITY lol3 \"&lol2;&lol2;\">\r\n...\r\n<!ENTITY lol100 \"&lol99;&lol99;\">\r\n]>\r\n<lolz>&lol100;</lolz>\r\n</code></pre>\r\n\r\nExpanding all these entities requires an exponential amount of resources and will DoS a site.\r\n\r\nThis attack is commonly called the \"Billion Laughs\" attack :)\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nYour goal is to steal the contents of this site\'s <code>wp-config.php</code> and make it appear in a JavaScript <code>alert()</code>.\r\n\r\n[attack attack=12-xxe.js]\r\n\r\nThe red \"Verify Exploit\" button will:\r\n\r\n<ol>\r\n	<li>Load the homepage of this site in a “browser” (behind the scenes: you won’t see this) as you, the malicious hacker,</li>\r\n	<li>Add [url attack=12-xxe.js]<code>/attacks/12-xxe.js</code>[/url] to the browser’s context (to simulate you performing malicious actions on the site),</li>\r\n	<li>Wait a few seconds for an <code>alert()</code> to appear, and</li>\r\n	<li>If an <code>alert()</code> happens, checks to see if its contents includes the contents of wp-config.php.</li>\r\n</ol>\r\n\r\nYou don\'t need to use the [url attack=12-xxe.js]<code>/attacks/12-xxe.js</code>[/url] file; you can use whatever tools you like.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\nAs bad as these exploits can be, the defense against them is <a href=\"http://php.net/manual/en/function.libxml-disable-entity-loader.php\">super simple</a>:\r\n\r\n<pre><code class=\"php\">\r\nlibxml_disable_entity_loader( true );\r\n</code></pre>\r\n\r\nOnce you\'ve fixed the plugin, click the green \"Verify Fix\" button to check your work.','12: XXE','','private','closed','closed','','12-xxe','','','2015-03-18 09:45:46','2015-03-18 09:45:46','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=120',0,'post','',0),(220,1,'2014-03-26 04:07:27','2014-03-26 04:07:27','<h2>Introduction</h2>\r\n\r\nLearning \"the acronyms\" is all well and good, but if your code mistakenly uses <code>||</code> instead of <code>&&</code>, all the escaping in the world may not be able to save you.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nThe list of recent colors in the Color Picker are displayed as images (for some reason...). The image URLs are cryptographically signed so that nefarious other sites can\'t just make up image URLs to hotlink (perish the thought!).\r\n\r\nYour goal is to exploit a logic error in the Color Picker plugin that allows you to generate an image of any color without having to figure out the required cryptographic hash.\r\n\r\nTo prove your attack works, generate an image with color <code>#deface</code> and whatever text (the URL\'s <code>reason</code> parameter) without the correct hash.\r\n\r\n[attack attack=13-logic-errors.html]\r\n\r\nThe red \"Verify Exploit\" robot will:\r\n\r\n<ol>\r\n	<li>Load [url attack=13-logic-errors.html]<code>/attacks/13-logic-errors.html</code>[/url] in a \"browser\" as though it were hosted on <code>example.com</code>.</li>\r\n	<li>Verify the image loads properly, and</li>\r\n	<li>Verify the image has the correct color.</li>\r\n</ol>\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\nThere are (at least) three logic errors in the Color Picker plugin.  One major, one mediumish, and one minor.\r\n\r\nFind and fix them all.\r\n\r\nOnce you\'ve fixed the bugs, use the green \"Verify Fix\" robot to check that everything is working correctly.','13: Logic Errors','','private','closed','closed','','13-logic-errors','','','2015-03-18 09:45:46','2015-03-18 09:45:46','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=220',0,'post','',0),(228,1,'2014-03-26 05:10:09','2014-03-26 05:10:09','<h2>Introduction</h2>\r\n\r\n<a href=\"http://en.wikipedia.org/wiki/Message_authentication_code\">Message Authentication Codes</a> can be used to sign messages to verify their authenticity.\r\n\r\nAs we just saw, the Color Picker plugin uses <code>md5()</code> to sign image URLs with a hash.  The plugin then checks this hash before serving the image to ensure the request was valid.\r\n\r\nMACs can be implemented using various cryptographic primitives (hash functions and block ciphers, for example). It turns out, though, that one of the most naïve implementations of a MAC is not secure.\r\n\r\n<pre><code class=\"php\">\r\nfunction MAC( $message ) {\r\n  return md5( SECRET_KEY . $message );\r\n}\r\n</code></pre>\r\n\r\nThis type of MAC construction is vulnerable to a \"<a href=\"https://en.wikipedia.org/wiki/Length_extension_attack\">Length Extension Attack</a>\", which allows an attacker with access to one MAC\'d message to append anything she or he wants to the message and calculate the new, longer message\'s MAC <em>without knowing</em> the <code>SECRET_KEY</code>.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nThis one\'s tricky :)\r\n\r\nThis is an image with a known working MAC:\r\n\r\n[attack attack=14-md5.html]\r\n\r\n<a href=\"http://dakuten.local/Checkouts/vip-napa-evil/wordpress/wp-admin/admin-post.php?action=vip_background_color_image&amp;value=%23ffe1ae&amp;reason=known&amp;hash=4009b3716fbbfb374ab9f8ebcc31ed88\"><img src=\"http://dakuten.local/Checkouts/vip-napa-evil/wordpress/wp-admin/admin-post.php?action=vip_background_color_image&amp;value=%23ffe1ae&amp;reason=known&amp;hash=4009b3716fbbfb374ab9f8ebcc31ed88\" style=\"border: 1px solid #ddd\" />\r\n</a>\r\n\r\nYour goal is to exploit the length extension vulnerability by altering that URL to serve instead an image with color <code>#deface</code> and text <code>MWAHAHA!</code>.\r\n\r\nClearly you could just generate that image here on this site, but pretend you don\'t have access to the site, or this site\'s secret key.\r\n\r\nChange the <code>&lt;img&gt;</code>\'s <code>src</code> in [url attack=14-md5.html]<code>/attacks/14-md5.html</code>[/url] to the new URL you calculate and press the red \"Verify Exploit\" button, which will:\r\n\r\n<ol>\r\n	<li>Load [url attack=14-md5.html]<code>/attacks/14-md5.html</code>[/url] in a \"browser\" as though it were hosted on <code>example.com</code>.</li>\r\n	<li>Verify the image loads properly, and</li>\r\n	<li>Verify the image has the correct color and text.</li>\r\n</ol>\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\n<code>md5()</code> by itself is not a secure MAC.  Luckily, there\'s a very easy replacement which is secure: PHP\'s <a href=\"http://php.net/hash_hmac\"><code>hash_hmac()</code></a>.\r\n\r\n<pre><code class=\"php\">\r\nfunction MAC( $message ) {\r\n  return hash_hmac( \'md5\', $message, SECRET_KEY );\r\n}\r\n</code></pre>\r\n\r\nOnce you\'ve fixed the Color Picker plugin\'s vulnerability, click the green \"Verify Fix\" button to make sure everything is working.','14: md5() Is Not a Good MAC','','private','closed','closed','','14-md5','','','2015-03-18 09:45:46','2015-03-18 09:45:46','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=228',0,'post','',0),(241,1,'2014-03-26 05:39:11','2014-03-26 05:39:11','<h2>Introduction</h2>\r\n\r\nConfiguration issues are a too-common source of security vulnerabilities.\r\n\r\nYou should always change the default password on your router, for example.  MySQL needs to be set up with a strong password and limited access for root.  Remote servers should be configured to deny password-based login attempts.\r\n\r\nDefaults aren\'t always good, and you need to understand the tool you\'re using or the system you\'re setting up to know what configuration is secure for your needs.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Attack!</h2>\r\n\r\nYup, there\'s a configuration bug in the plugin.\r\n\r\nThe attack is too simple to verify, so don\'t bother with the red \"Verify Exploit\" button.\r\n\r\nReally.\r\n\r\n<!--nextpage-->\r\n\r\n<h2>Defend!</h2>\r\n\r\nYou\'ll either see it right away and be annoyed to end this workshop on such a low note, or it\'ll take you a while to find, and you\'ll be annoyed to end this workshop on such a low note.\r\n\r\nEither way, you\'re welcome :)\r\n\r\nOnce you\'ve fixed and grumbled about the bug, click the green \"Verify Fix\" button to check your busywork.','15: Configuration','','private','closed','closed','','15-configuration','','','2015-03-18 09:45:46','2015-03-18 09:45:46','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=241',0,'post','',0),(247,1,'2014-03-26 06:12:01','2014-03-26 06:12:01','Whew! That was a lot of \"Verify\" button clicks.\r\n\r\nThanks for rocking the Security Workshop!','16: The End','','private','closed','closed','','16-the-end','','','2015-03-18 09:45:46','2015-03-18 09:45:46','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=247',0,'post','',0),(6,1,'2014-03-19 22:27:08','2014-03-19 22:27:08','On the right, you\'ll see a <strong>Color Picker</strong> (a plugin by <em>Vulnerabilities Inside Plugins, LLC</em>).\r\n\r\n<strong>Click the grey box</strong>, and (depending on your browser) you\'ll either see a color picker or be able to enter a <code>#hex</code> value for a color.\r\n\r\n<strong>Click the \"Save!\" button</strong>, and the color will be stored as a cookie and will be used as the background color for this site until you either change it again or <strong>click the \"Clear\" button</strong>.\r\n\r\nUnfortunately, these <em>Vulnerabilities Inside Plugins</em> developers are giving VIP a bad name; they aren\'t very good at securing their code. <strong>The plugin contains several vulnerabilities</strong>, and we need to show them how VIPs really code.\r\n\r\nThe plugin\'s code is in <code>/wp-content/plugins/background-color-picker/</code>.\r\n\r\nFor each vulnerability we find, we\'re going to exploit it first, then fix it second.\r\n\r\nLet\'s start with [url post=0-open-redirect]the first vulnerability[/url].','Hello world!','','publish','closed','closed','','hello-world','','','2015-03-17 23:30:40','2015-03-17 23:30:40','',0,'http://dakuten.local/Checkouts/vip-napa-evil/?p=6',0,'post','',0);
/*!40000 ALTER TABLE `evil_posts` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2015-04-24  1:05:10
